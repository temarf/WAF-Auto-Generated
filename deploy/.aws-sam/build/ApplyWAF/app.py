import json
import boto3
import string
import random

# Create a WAFv2 client
wafv2 = boto3.client('wafv2')

ssm = boto3.client('ssm')

# Define the scope for the Web ACL (CLOUDFRONT, REGIONAL)
SCOPE = "REGIONAL"

# Define the Web ACL name
WEB_ACL_NAME = "WAF_AutoGenerated"

def lambda_handler(event, context):
    # Get the Web ACL ARN and ID
    try:
        web_acl_arn, web_acl_id = get_web_acl_details(WEB_ACL_NAME, SCOPE)
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(f"Error: {str(e)}")
        }
    
    updated_rules = []
    
    web_acl_detail= wafv2.get_web_acl(Name=WEB_ACL_NAME,Scope=SCOPE,Id=web_acl_id)
    lock_token = web_acl_detail.get('LockToken')
    
    #list all existed the rules
    web_acl_rules = web_acl_detail['WebACL']['Rules']
    
    if len(web_acl_rules) != 0:
        #assign priority to newly added rules so the priority is not duplicate
        priority_rule = int(web_acl_rules[-1]['Priority']) + 1
        #TODO: made it able to detect missing number ex. if existed rules are 1,2,3,5 assign 4 for the new rule
        
        #add back old rules
        for rule in web_acl_detail['WebACL']['Rules']:
            updated_rules.append(rule)

    else:
        #there is no rule assign 1
        priority_rule = 1

    
    #append rules from event to rules to update
    for rule in event['Rules']:
        rule_new = {
            "Name" : rule['Name']+'-'+str(priority_rule),
            "Priority" : priority_rule,
            "Statement" : rule['Statement'],
            "Action": rule['Action'],
            "VisibilityConfig": rule['VisibilityConfig'],
        }
        priority_rule+=1
        print("new rules")
        print(rule_new)
        updated_rules.append(rule_new)
    print("updated_rules:")
    print(updated_rules)
    update_web_acl_request = {
        "Name": WEB_ACL_NAME,
        "Scope": SCOPE,
        "Id": web_acl_id,
        "LockToken": lock_token,
        "Rules": updated_rules,
        "DefaultAction": {
            "Allow": {}
        },
        "VisibilityConfig": {
            "SampledRequestsEnabled": True,
            "CloudWatchMetricsEnabled": True,
            "MetricName": WEB_ACL_NAME
        }
    }
    print("updated rules:")
    print(update_web_acl_request)
    
    output = json.dumps(event['Rules'], indent=4)

    
    try:
        response = wafv2.update_web_acl(**update_web_acl_request)
        return {
            'statusCode': 200,
            'body': (f"New rule {output} created and assigned to Web ACL '{WEB_ACL_NAME}'")
        }
    except Exception as e:
        loop = event['loop']
        loop = loop+1
        if loop >= 3:
            return{
            'statusCode': 200,
            'body': (f"""fail to apply rulesstr
the possible rules are {output}
and with error: {e}""")
            }
        else:
            return{
                'statusCode': 400,
                'body': (f"{output} this input has error {e} please try modify its to fit aws wafv2 rule and out put it as Please return the output as a json object, the output should be in form of  \"Rules\":[your created rules], you should not answer with anything else"),
                'loop': loop
                }

def get_web_acl_details(web_acl_name, scope):
    # List Web ACLs to find the one with the given name
    web_acls = wafv2.list_web_acls(Scope=scope)
    for web_acl in web_acls['WebACLs']:
        if web_acl['Name'] == web_acl_name:
            return web_acl['ARN'], web_acl['Id']

    # If the Web ACL is not found, create a new one
    response = wafv2.create_web_acl(
        Name=web_acl_name,
        Scope=scope,
        DefaultAction={'Allow': {}},
        VisibilityConfig={
            'SampledRequestsEnabled': True,
            'CloudWatchMetricsEnabled': True,
            'MetricName': web_acl_name
        }
    )
    return response['Summary']['ARN'], response['Summary']['Id']
